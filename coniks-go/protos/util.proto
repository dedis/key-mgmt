/*
  Copyright (c) 2015, Princeton University.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are 
  met:
  * Redistributions of source code must retain the above copyright 
  notice, this list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above 
  copyright notice, this list of conditions and the following disclaimer 
  in the documentation and/or other materials provided with the 
  distribution.
  * Neither the name of Princeton University nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
 */

// author: Marcela S. Melara (melara@cs.princeton.edu)
syntax = "proto2";
package common;

message Hash{
        // check that len matches the Hash size in bytes defined in client/server
        optional int32 len = 1;  // need to check that len field is specified
        repeated fixed32 hash = 2 [packed = true];
}

message Commitment{
        optional uint64 epoch = 1;  // this is actually the epoch date in milli seconds
        optional Hash root_hash = 2;  // need to check that root hash is included
        repeated fixed32 signature = 3;
}

message ServerResp{
        // generic server response, sent when error occurs or as ACK
        enum Message{
             SUCCESS = 0;
             NAME_EXISTS_ERR = 1;
             MALFORMED_ERR = 2;
             SERVER_ERR = 3;
             NAME_NOT_FOUND_ERR = 4;
        }
        optional Message message = 1;
}

message CompleteRootNode{
        optional Hash left = 1;
        optional Hash right = 2;
        optional Hash prev = 3;
        optional uint64 epoch = 4;
}  

// this is the format of commitments that servers exchange
message WitnessedCommitment{
        optional string provider = 1;
        optional Commitment comm = 2;
        optional CompleteRootNode root = 3;
}

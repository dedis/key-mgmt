/*
  Copyright (c) 2015, Princeton University.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are 
  met:
  * Redistributions of source code must retain the above copyright 
  notice, this list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above 
  copyright notice, this list of conditions and the following disclaimer 
  in the documentation and/or other materials provided with the 
  distribution.
  * Neither the name of Princeton University nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
 */

// author: Marcela S. Melara (melara@cs.princeton.edu)

syntax = "proto2";
package common;

import "util.proto";

message Registration{
        // server must make sure that these two fields are specified
        optional string name = 1; // this name MUST be in DB for server to accept
        optional string publickey = 2; //server will parse this from C S expression
}

message CommitmentReq{
        // ok to use same format for getComm and getWitness calls
        enum CommitmentType{
                 SELF = 0;
                 WITNESS = 1;
       }         
                 
        // server checks that type, and epoch are specified
        optional CommitmentType type = 1; 
        // epoch  should <= than current epoch
        optional  uint64 epoch = 2;
        // provider MUST be specified if type is WITNESS
        optional string provider = 3;
}

message KeyLookup{
         // server checks that name and epoch are specified
        optional string name = 1;
        optional uint64 epoch = 2;
}

message RegistrationResp{
        // client checks that initial epoch and epoch interval are specified
        optional uint64 init_epoch = 1;
        optional uint32 epoch_interval = 2;
}

message AuthPath{
        // auth path consists of user leaf node, possibly interior nodes, and root node
        message UserLeafNode{
                // client does not assume server has not sent malformed leaf node
                optional string name = 1;
                optional string publickey = 2;
                optional uint64 epoch_added = 3;
                optional bool allows_unsigned_keychange = 4;
                optional bool allows_public_lookup = 5;
                repeated fixed32 lookup_index = 6;
                //repeated fixed32 signature = 7;
                optional uint32 intlevels = 7; // needed so client can loop over interior nodes
        }
        
        optional UserLeafNode leaf = 1; // client checks if leaf is specified

        // indicates if the hash is for the left or right subtree
        enum PrunedChild{
             LEFT = 0;
             RIGHT = 1;
        }

        message InteriorNode{
                // client needs to check that both of these fields are set for each interior node
                optional PrunedChild prunedchild = 1; // needed so client knows how to compute hash
                optional Hash subtree = 2; 
        }

        repeated InteriorNode interior = 2;

        message RootNode{
                // client does not assume server has not sent malformed root node
                optional PrunedChild prunedchild = 1;
                optional Hash subtree = 2;
                optional Hash prev = 3;
                optional uint64 epoch = 4;
         }

         optional RootNode root = 3;
}
